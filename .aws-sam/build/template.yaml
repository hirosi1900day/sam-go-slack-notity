AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'aws-golang Sample SAM Template for aws-golang

  '
Parameters:
  BucketName:
    Type: String
    Default: sam-s3input-hisosi1900day00000
Globals:
  Function:
    Timeout: 10
    MemorySize: 128
Resources:
  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
  AwsHandler:
    Metadata:
      BuildMethod: go1.x
      SamResourceId: AwsHandler
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aws-handler
      CodeUri: AwsHandler
      Handler: aws
      Runtime: provided.al2
      Role: arn:aws:iam::572919087216:role/slack_role
      Architectures:
      - arm64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - AwsSqsQueue
              - Arn
      EventInvokeConfig:
        MaximumRetryAttempts: 0
  LowsHandler:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AwsHandler}
      RetentionInDays: 1
  SlackHandler:
    Metadata:
      BuildMethod: go1.x
      SamResourceId: SlackHandler
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: slack-handler
      CodeUri: SlackHandler
      Handler: slack
      Runtime: provided.al2
      Role: arn:aws:iam::572919087216:role/slack_role
      Architectures:
      - arm64
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /slack
            Method: ANY
            PayloadFormatVersion: '2.0'
            ApiId:
              Ref: ApiGateway
      EventInvokeConfig:
        MaximumRetryAttempts: 0
  LogSlackHandler:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SlackHandler}
      RetentionInDays: 1
  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: slack-apigateway
      StageName: default
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
          - LogGroupApiGateway
          - Arn
        Format: $context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod
          $context.routeKey $context.protocol" $context.status $context.responseLength
          $context.requestId
  LogGroupApiGateway:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/api-gateway/${ApiGateway}
      RetentionInDays: 7
  AwsSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-aws.fifo
      FifoQueue: true
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - DeadLetterQueue
          - Arn
        maxReceiveCount: 1
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-dead-letter-queue.fifo
      FifoQueue: true
      VisibilityTimeout: 300
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: group
        AttributeType: S
      TableName: test-reviewergroup
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: group-index
        KeySchema:
        - AttributeName: group
          KeyType: HASH
        Projection:
          NonKeyAttributes:
          - user
          ProjectionType: INCLUDE
