AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-golang
  Sample SAM Template for aws-golang

Parameters:
  BucketName:
    Type: String
    Default: "sam-s3input-hisosi1900day00000"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Resources:
  S3FileTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt [ForDynamoDbLambdaQueue, Arn]
          Protocol: sqs
        - Endpoint: !GetAtt [ForSlackNotifyLambdaQueue, Arn]
          Protocol: sqs
      TopicName: s3-file-topic
  S3EventTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      Topics:
        - !Ref S3FileTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: TopicPolicy
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - "sns:Publish"
            Resource: !Ref S3FileTopic
      
  ForDynamoDbLambdaQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 20
      MessageRetentionPeriod: 60

  ForSlackNotifyLambdaQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 20
      MessageRetentionPeriod: 60

  AwsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ForSlackNotifyLambdaQueue
        - !Ref ForDynamoDbLambdaQueue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:*"
            Resource: !GetAtt [AwsSqsQueue, Arn]
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref S3FileTopic

  S3UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        TopicConfigurations:
        - Topic: !Ref S3FileTopic
          Event: s3:ObjectCreated:*
    DependsOn: S3FileTopic

  AwsHandler:
    Metadata:
      BuildMethod: go1.x
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: aws-handler
      CodeUri: aws/
      Handler: aws
      Runtime: provided.al2
      Role: arn:aws:iam::572919087216:role/slack_role
      Architectures:
        - arm64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AwsSqsQueue.Arn
      EventInvokeConfig:
        # エラー時に再試行しない
        MaximumRetryAttempts: 0
  LowsHandler:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${AwsHandler}
      RetentionInDays: 1
  DynamoDbLambda:
    Metadata:
      BuildMethod: go1.x
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: dynamodb/
      Handler: dynamodb
      Runtime: provided.al2
      Role: arn:aws:iam::572919087216:role/slack_role
      Timeout: 10
      Tracing: Active
      Architectures:
        - arm64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ForDynamoDbLambdaQueue.Arn
            BatchSize: 10
      EventInvokeConfig:
        # エラー時に再試行しない
        MaximumRetryAttempts: 0
  DynamoDbLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 
        Fn::Sub: /aws/lambda/${DynamoDbLambda}
      RetentionInDays: 1

  SlackNotifyLambda:
    Metadata:
      BuildMethod: go1.x
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: slack_notify/
      Handler: slack_notify
      Runtime: provided.al2
      Role: arn:aws:iam::572919087216:role/slack_role
      Timeout: 10
      Tracing: Active
      Architectures:
        - arm64
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ForSlackNotifyLambdaQueue.Arn
            BatchSize: 10
      EventInvokeConfig:
        # エラー時に再試行しない
        MaximumRetryAttempts: 0
  SlackNotifyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 
        Fn::Sub: /aws/lambda/${SlackNotifyLambda}
      RetentionInDays: 1

  SlackHandler:
    Metadata:
     BuildMethod: go1.x
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: slack-handler
      CodeUri: slack/
      Handler: slack
      Runtime: provided.al2
      Role: arn:aws:iam::572919087216:role/slack_role
      Architectures:
        - arm64
      Events:
        ApiEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /slack
            Method: ANY
            PayloadFormatVersion: '2.0'
            ApiId:
             Ref: ApiGateway
      EventInvokeConfig:
        # エラー時に再試行しない
        MaximumRetryAttempts: 0
  LogSlackHandler:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SlackHandler}
      RetentionInDays: 1

  ApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: slack-apigateway
      StageName: default
      # NOTE: 全パス・メソッドのログレベル: ERROR を CloudWatch Logs にロギングする
      #       AWS Config: api-gw-execution-logging-enabled 対応
      # see: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-deployment-stagedescription-methodsetting.html#cfn-apigateway-deployment-stagedescription-methodsetting-datatraceenabled
      AccessLogSettings:
        DestinationArn:
          Fn::GetAtt:
            - LogGroupApiGateway
            - Arn
        Format: '$context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.protocol" $context.status $context.responseLength $context.requestId'
  LogGroupApiGateway:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/api-gateway/${ApiGateway}
      RetentionInDays: 7

  # aws コマンド実行用の SQS
  AwsSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-aws.fifo # fifo 有効化時には .fifo を suffix に指定する
      FifoQueue: true
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - DeadLetterQueue
            - Arn
        # SQS イベントトリガーで実行される Lambda Function がエラーを返す場合にリトライする最大回数
        # maxReceiveCount を超えると dead letter queue に移動する
        # see: https://docs.aws.amazon.com/ja_jp/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html#aws-sqs-queue-redrive
        # 早急にエラー検知できる様、 最小値 maxReceiveCount=1 を指定する
        maxReceiveCount: 1

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-dead-letter-queue.fifo
      # FIFO キューを有効化している SQS のデッドレターキューも FIFO を有効化する必要がある
      FifoQueue: true
      VisibilityTimeout: 300

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: group
          AttributeType: S
      TableName: test-reviewergroup
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      # NOTE: GSI はテーブル作成後に追加する必要がある
      #       テーブル追加時に GlobalSecondaryIndexes の設定はコメントアウトする等、対応が必要です。
      GlobalSecondaryIndexes:
        - IndexName: group-index
          KeySchema:
            - AttributeName: group
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - user
            ProjectionType: INCLUDE
